a->available.packages()
available.packages()
a <- available.packages()
head(rownames(a),3)
install.packages(c("solidify",
"gpplot2","devtools"))
dddd
q()
utils:::menuInstallPkgs()
source("http://bioconductor.org/biocLite.R")
bioLite()
biocLite()
biocLite(c('GenomicFeatures','AnnotationDbi'))
library(ggplot2)
utils:::menuInstallPkgs()
utils:::menuInstallPkgs()
local({pkg <- select.list(sort(.packages(all.available = TRUE)),graphics=TRUE)
if(nchar(pkg)) library(pkg, character.only=TRUE)})
install.package("ggplot2")
install.packages("ggplot2")
utils:::menuInstallPkgs()
install.packages("ggplot2")
find.packages("ggplot2")
find.package(
"ggplot2")
install.packages("ggplot)
"
)
install.packages("ggplot")
install.packages("ggplot2")
sessionInfo()
install.packages("tools")
sessionInfo("ggplot2")
sessionInfo('ggplot2')
install.packages('ggplot2',dependencies = TRUE)
setRepositories()
install.packages("ggplot2")
chooseCRANmirror()
install.packages("ggplot2")
library(ggplot2)
search()
find.packages("devtools")
find.package("devtools")
install.packages("devetools")
install.packages("devtools")
library(devtools)
find rtools()
find.rtools()
find_rtools()
install.packages("KernSmooth")
library(KernSmooth)
q()
x <- factor(c('yes', 'yes','no','yes')
)
x
table(x)
unclass(x)
x <- factor(c('yes','yes','no','yes'),levels=('no','yes'))
x <- factor(c('yes','yes','no','yes') levels=('no','yes'))
x <- factor(c('yes','yes','no','yes'), levels=('no','yes'))
x <- factor(c(yes",'yes','no','yes'), levels=('no','yes'))
"
x <- factor(c("yes","yes","no","yes"), levels=c("no","yes"))
x
x <- factor(c("yes","yes","no","yes"), levels=c("yes","no"))
x
table(x)
x <- c(1,2,NA,NaN,3)
x
is.na(x)
is.nan(x)
x <- frames( rows =1:4, cols = c(true, false, true, false))
x <- data.frames( foo =1:4, bar = c(true, false, true, false))
x <- data.frame( foo =1:4, bar = c(true, false, true, false))
x <- data.frame( foo =1:4, bar = c(TRUE, FALSE, TRUE, FALSE))
x
nrows(x)
nrow(x)
ncol(x)
m<-matrix(1:4, nrow=2, ncol=2)
dimension(x) <- list(c("a","b"),c("c","d"))
dimnames(x) <- list(c("a","b"),c("c","d"))
dimnames(x) <- list(c("a","b"),c("c","d"))
m
m
dimnames(m) <- list(c("a","b"),c("c","d"))
m
q()
for (i in 1:10)
{
print(i)
}
x<-c("a","b","c","d")
for (i in 1:4)
{
print(x[i])
}
for (i in seq_along(x))
{
print(x[i])
}
for (letter in x)
{
print (letter)
}
x <- matrix(1:6, 2,3)
for (i in seq_len(nrow(x))
for (j in seq_len(ncol(x)) {
for (i in seq_len(nrow(x)))
for (j in seq_len(ncol(x))) {
print x[i,j])
print (x[i,j])
print (x[i,j])
clear
cls
x
for (i in seq_len(x)))
for (i in seq_len(nrow(x)))
for (j in seq_len(ncol(x))) {
print (x[i,j])
}
count <- 0
while (count < 10) {
print(count)
count <- count+1
}
z <-5
while (z >=3 && z <=10)
{
print(z)
coin <- rbinom(1,1,0.5)
if (coin == 1) {
z <- z+1
}
else
{
z<-z-1
}
}
x0 <- 1
tot <- 1e-8
repeat {
x1 <- computeEstimate()
if (abs (x1-x0) < tot) {
break
}
else
{
x0 <- x1
}
}
add2 <- function(x,y) {
x+y
}
add2(4,5)
above10 <- function(x) {
use <- x > 10
x[use]
}
above <- function(x,n) {
use <- x > 10
use <- x > n
x[use]
}
above(15,10)
above <- function(x,n=10) {
use <- x > n
x[use]
}
above(15)
above(11)
x < 1:20
x <- 1:20
above(x)
above(x,15)
colmean <- function(y) {
nc <- ncol(y)
means <- numeric(nc)
for (i in 1:nc) {
means[i] <- mean(y[,y])
}
means
}
colmean(airquality)
mydata <-rnorm(100)
sd(mydata)
mydata
sd(x=mydata)
sd(na.rm=FALSE,x=mydata)
lm(data = mydata, y~x, model=FALSE,1:100)
args(lm)
f<-function(a,b) {
print(a)
print(b)
}
f(2)
f(2,3)
args(paste)
paste("a","b", sep=":")
paste("a","b","c", sep=":")
make.power <-function(n) {
pow <-function(x) { x * x }
pow
}
cube <- make.power(3)
cube
cub(3)
cube(3)
square <- make.power(2)
square
square(2)
ls(environment(cube))
get ("n", environment(cube))
y <-10
f <- function(x) {
y<-2
y^2 + g(x)
}
g<-function(x) { x * y }
f(3)
make.NegLogLik <- function(data, fixed=c(FALSE,FALSE)) {
params <- fixed
function(p) {
params[!fixed] <- p
mu <- params[1]
sigma <- params[2]
a <- -0.5*length(data)*log(2*pi*sigma^2)
b <- -0.5*sum((data-mu)^2) / (sigma^2)
-(a + b)
}
}
optim(c(mu=0, sigma=1, nLL)$par
optim(c(mu=0, sigma=1, nLL)
optim(c(mu=0, sigma=1, NULL)$par
'
optim(c(mu=0, sigma=1, NULL)$par
optim(c(mu=0, sigma=1, nLL)
''
nLL <-make.NegLogLik(normals,c(FALSE,2))
optimize(nLL,c(-1,3))$minimum
x<-as.Date("1970-01-01")
unclass(x)
unclass(as.Date("1970-01-02")
)
x<-Sys.time()
x
p<-as.POSIXlt(x)
/
p
names(unclass(p))
p$sec
x<-Sys.time()
unclass(x)
x$sec
p<-as.POSIXlt(x)
p$sec
datestring<-c("January 10,2012 10:40","December 9,2011 9:10")
x
class(x)
x[2]
x<-strptime(datestring,"%B %d, %Y %H:%M)
"
)
x<-strptime(datestring,"%B %d %Y %H:%M")
x
datestring
x
x
x<-as.Date("2012-01-01")
y <-strptime("9 Jan 2011 11:34:21", "%d %b %Y %H:%M:%S")
x-
7
x-y
x<-as.POSIXlt(x)
x-y
cube <-function(x,n) {
x^3
}
cube(3)
x<-1:10
if (x > 5) {
x <-0
}
x
x <-0
x
x<-function(x) {
f<-function(x) {
g<-function(y) {
y+z
}
z<-4
x+g(x)
}
}
f<-function(x) {
g<-function(y) {
y+z
}
z<-4
x+g(x)
}
z<-10
f(3)
x<-5
y<- if(x<3) { NA }
else {
y<- if (x<3) {
NA
} else {
10
}
y
q()
source("plot1.R")
setwd("C:/TOOLS/DataScienceCourceWork/ExData_Plotting1")
source("plot1.R")
plot1()
head(fpwr)
pwr <-read.table("../data/household_power_consumption.txt",na.strings="?",
stringsAsFactors = FALSE, skip=1,sep=";")
head(pwr)
pwr <-read.table("../data/household_power_consumption.txt",na.strings="?",
stringsAsFactors = FALSE, skip=1,sep=";")
source("plot1.R")
plot1()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot2.R")
plot2()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot3.R")
plot3()
source("plot2.R")
plot3()
plot2()
source("plot1.R")
plot1()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
source("plot4.R")
plot4()
source("plot4.R")
warnings()
source("plot4.R")
plot4()
source("plot3.R")
source("plot4.R")
source("plot3.R")
plot3()
source("plot4.R")
plot4()
